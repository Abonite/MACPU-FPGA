# register select:
# alu 1st reg:   1 - 6, reg A - reg F; 7, R; 8, immediate number, 0, null
# alu 2nd reg:   1 - 6, reg A - reg F; 7, SS; 8, SP; 0, null

[define]
IN = 0
OUT = 1
INT_PRI_AB = 0
INT_PRI_BA = 1
INT_ADDR_SET_DISABLE = 0
INT_ADDR_SET_INTA = 1
INT_ADDR_SET_INTB = 2
INT_ADDR_RESET = 2
INT_NUM_DATAMUX = "datamux[4:0]"
REG_A = 1
REG_B = 2
REG_C = 3
REG_D = 4
REG_E = 5
REG_F = 6
REG_R = 7
REG_SS = 7
REG_SP = 8
REG_IMDN = 8
REG_NULL = 0


[NOP]
base_bcode = 0b0000_0000_0000_0000   #00 00
arg_num = 0

io = {rw = "IN", lock = "IN"}
pc = {set = false, out = true, lock = false}
dc = {data_io = "IN", en = true, addr_o = false, lock = false}
ct = {inta_en = false, intb_en = false, int_pri = "INT_PRI_AB", set_info = false, set_addr = "INT_ADDR_SET_ENABLE", soft_int_effe = false, soft_int_num = 0, recover_pc = false}
alu = {direct_io = "IN", direct_io_en = false, dc_io_en = false, rega = "REGNULL", regb = "REGNULL", operate = 0}


[MOV]
base_bcode = 0b0000_0000_0000_0001
arg_num = 2
arg_kinds = [
    ["addr", "regs", "0"],      #00 01
    ["regs", "regs", "1"],      #00 02
    ["regs", "addr", "2"]       #00 03
]
[MOV.appendinfo]
# mov data in addr into regiter
arga = "addr"
argb = "regs"
append_code = 0
io = {rw = "IN", lock = "IN"}
pc = {set = false, out = true, lock = false}
dc = {data_io = "IN", en = true, addr_o = false, lock = false}
ct = {inta_en = false, intb_en = false, int_pri = "INT_PRI_AB", set_info = false, set_addr = "INT_ADDR_SET_ENABLE", soft_int_effe = false, soft_int_num = 0, recover_pc = false}
alu = {direct_io = "IN", direct_io_en = false, dc_io_en = false, rega = "REGNULL", regb = "REGNULL", operate = 0}


[LOAD]
bcode = 0b0000_0000_0000_0100   #00 04
arg_num = 2
arg_kinds = [
    ["imdn", "regs"]
]

[ADD]
bcode = 0b0000_0001_0000_0000   #01 00
arg_num = 2
arg_kinds = [
    ["regs", "regs"]
]

[SUB]
bcode = 0b0000_0001_0000_0001   #01 01
arg_num = 2
arg_kinds = [
    ["regs", "regs"]
]

[AND]
bcode = 0b0000_0001_0000_0010   #01 02
arg_num = 2
arg_kinds = [
    ["regs", "regs"]
]

[OR]
bcode = 0b0000_0001_0000_0011   #01 03
arg_num = 2
arg_kinds = [
    ["regs", "regs"]
]

[NOT]
bcode = 0b0000_0001_0000_0100   #01 04
arg_num = 1
arg_kinds = [
    ["regs"]
]

[XOR]
bcode = 0b0000_0001_0000_0101   #01 05
arg_num = 2
arg_kinds = [
    ["regs", "regs"]
]

[RAND]
bcode = 0b0000_0001_0000_0110   #01 06
arg_num = 1
arg_kinds = [
    ["regs"]
]

[ROR]
bcode = 0b0000_0001_0000_0111   #01 07
arg_num = 1
arg_kinds = [
    ["regs"]
]

[RXOR]
bcode = 0b0000_0001_0000_1000   #01 08
arg_num = 1
arg_kinds = [
    ["regs"]
]

[LSL]
bcode = 0b0000_0001_0000_1001   #01 09
arg_num = 2
arg_kinds = [
    ["regs", "regs"]
]

[LSR]
bcode = 0b0000_0001_0000_1010   #01 0A
arg_num = 2
arg_kinds = [
    ["regs", "regs"]
]

[ASL]
bcode = 0b0000_0001_0000_1011   #01 0B
arg_num = 2
arg_kinds = [
    ["regs", "regs"]
]

[ASR]
bcode = 0b0000_0001_0000_1100   #01 0C
arg_num = 2
arg_kinds = [
    ["regs", "regs"]
]

[CSL]
bcode = 0b0000_0001_0000_1101   #01 0D
arg_num = 2
arg_kinds = [
    ["regs", "regs"]
]

[CSR]
bcode = 0b0000_0001_0000_1110   #01 0E
arg_num = 2
arg_kinds = [
    ["regs", "regs"]
]

[INC]
bcode = 0b0000_0001_0001_0000   #01 10
arg_num = 1
arg_kinds = [
    ["regs"]
]

[DEC]
bcode = 0b0000_0001_0001_0001   #01 11
arg_num = 1
arg_kinds = [
    ["regs"]
]

[JMP]
bcode = 0b0000_0010_0000_0000   #02 00
arg_num = 1
arg_kinds = [
    ["addr"],
    ["label"]
]

[PUSH]
bcode = 0b0000_0100_0000_0000   #04 00
arg_num = 1
arg_kinds = [
    ["addr"]
]

[POP]
bcode = 0b0000_0100_0000_0001   #04 01
arg_num = 1
arg_kinds = [
    ["addr"]
]

[INT]
bcode = 0b1000_0000_0000_0000   #80 00
arg_num = 1
arg_kinds = [
    ["imdn"]
]

[SAVEPC]
bcode = 0b1000_0000_0000_0001   #80 01
arg_num = 0

[RECOPC]
bcode = 0b1000_0000_0000_0010   #80 02
arg_num = 0